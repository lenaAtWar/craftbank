function checkToken(tokenName, client_id)
	if tokenName == nil then
		return false
	end

	if string.find(tokenName, "/") ~= nil then
		return false
	end

	tokenData = token.get(tokenName)
	tokenData = json.fromString(tokenData)
	if tokenData["client_id"] ~= client_id then
		return false
	end

	return tokenData["user_id"]
end

function prepareResponse(status, message, data)
	response = {}
	response["status"] = status
	response["message"] = message
	response["data"] = data

	return json.toString(response)
end

errorResponse = prepareResponse("error", "", "")

while true do
	client_id, msg, distance = rednet.receive(1000)
	if msg ~= nil then
		isSent = false
		response = errorResponse
		data = json.fromString(msg)
		if data["action"] == "auth" then
			shell.run(c_.path_app .. "auth")
			if userId ~= nil then
				tokenName = "bank_auth_" .. userId .. "_" .. os.day() .. "_" .. os.time()
				tokenData = {}
				tokenData["client_id"] = client_id
				tokenData["user_id"] = userId
				tokenData = json.toString(tokenData)
				token.set(tokenName, tokenData)

				response = prepareResponse("ok", tokenName, "")
				rednet.send(client_id, response)
				isSent = true
			end
		elseif data["action"] == "reg" then
			shell.run(c_.path_app .. "registration")
			if userId ~= nil then
				response = prepareResponse("ok", "", "")
				rednet.send(client_id, response)
				isSent = true
			end
		elseif data["action"] == "balance" then
			userId = checkToken(data["token"], client_id)
			if userId ~= false then
				balance = db.selectVar("users/" .. userId .. "/balance")
				response = prepareResponse("ok", balance, "")
				rednet.send(client_id, response)
				isSent = true
			end
		elseif data["action"] == "cash" and client_id == c_.terminal_id then
			userId = checkToken(data["token"], client_id)
			if userId ~= false then
				shell.run(c_.path_app .. "buy")
				if status == true then
					response = prepareResponse("ok", balance, "")
					rednet.send(client_id, response)
					isSent = true
				end
			end
		elseif data["action"] == "buy" then
			userId = checkToken(data["token"], client_id)
			if userId ~= false then
				shell.run(c_.path_app .. "buy")
				if transactionId ~= nil then
					response = prepareResponse("ok", "", "")
					rednet.send(client_id, response)
					isSent = true
				end
			end
		elseif data["action"] == "info" then
			shell.run(c_.path_app .. "info")
			response = prepareResponse("ok", info, "")
			rednet.send(client_id, response)
			isSent = true
		elseif data["action"] == "exit" then
			userId = checkToken(data["token"], client_id)
			if userId ~= false then
				token.delete(data["token"])
				response = prepareResponse("ok", "", "")
				rednet.send(client_id, response)
				isSent = true
			end
		end

		if isSent == false then
			rednet.send(client_id, response)
		end
	end
end